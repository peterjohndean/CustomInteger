/*
 * This file is part of Custom Integer (Swift Package).
 *
 * Copyright (C) 2025 Peter Dean
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

import Testing
@testable import CustomInteger

import Foundation

struct CustomInteger_Tests {
    let onBenchmarkTests = false
    
    @Test func General_Tests() {
        if let a = try? CustomInteger(for: 8) {
            #expect(a.isSigned(-1) == true)
            #expect(a.isSigned(1) == false)
            #expect(a.isSigned(UInt(1)) == false)
            
            #expect(a.isInRange(-1) == true)
            #expect(a.isInRange(UInt8(1)) == true)
            #expect(a.isInRange(-256) == false)
            
            #expect(a.isSignSame(lhs: -1, rhs: 1) == false)
            #expect(a.isSignSame(lhs: 1, rhs: 1) == true)
            #expect(a.isSignSame(lhs: 1, rhs: 1) == true)
            #expect(a.isSignSame(lhs: UInt16(1), rhs: UInt16(1)) == true)
            
            #expect(a.isSignOpposite(lhs: -1, rhs: 1) == true)
            #expect(a.isSignOpposite(lhs: 1, rhs: -1) == true)
            #expect(a.isSignOpposite(lhs: 1, rhs: 1) == false)
            #expect(a.isSignOpposite(lhs: UInt16(1), rhs: UInt16(1)) == false)
            
        }
    }
    
    @Test("Radix Conversions for Bit Widths 1 to 64 With Min/Max BitWidth Values") func testRadixConversionsWithMinMaxBitWidthValues() {
        let radices = [2, 8, 10, 16, 20]
        let expectedResults: [Int /*bitWidth*/: [Int /*radix*/: [(Int /*value*/, String /*result*/)]]] = [
            1:  [2: [(0, "0"), (-1, "-1" )],
                 8: [(0, "0"), (-1, "-1")],
                 10: [(0, "0"), (-1, "-1")],
                 16: [(0, "0"), (-1, "-1")],
                 20: [(0, "0"), (-1, "-1")]],
            2:  [2: [(1, "01"), (-2, "-10")],
                 8: [(1, "1"), (-2, "-2")],
                 10: [(1, "1"), (-2, "-2")],
                 16: [(1, "1"), (-2, "-2")],
                 20: [(1, "1"), (-2, "-2")]],
            3:  [2: [(3, "011"), (-4, "-100")],
                 8: [(3, "3"), (-4, "-4")],
                 10: [(3, "3"), (-4, "-4")],
                 16: [(3, "3"), (-4, "-4")],
                 20: [(3, "3"), (-4, "-4")]],
            4:  [2: [(7, "0111"), (-8, "-1000")],
                 8: [(7, "7"), (-8, "-10")],
                 10: [(7, "7"), (-8, "-8")],
                 16: [(7, "7"), (-8, "-8")],
                 20: [(7, "7"), (-8, "-8")]],
            5:  [2: [(15, "0_1111"), (-16, "-1_0000")],
                 8: [(15, "17"), (-16, "-20")],
                 10: [(15, "15"), (-16, "-16")],
                 16: [(15, "0f"), (-16, "-10")],
                 20: [(15, "f"), (-16, "-g")]],
            6:  [2: [(31, "01_1111"), (-32, "-10_0000")],
                 8: [(31, "37"), (-32, "-40")],
                 10: [(31, "31"), (-32, "-32")],
                 16: [(31, "1f"), (-32, "-20")],
                 20: [(31, "1b"), (-32, "-1c")]],
            7:  [2: [(63, "011_1111"), (-64, "-100_0000")],
                 8: [(63, "77"), (-64, "-100")],
                 10: [(63, "63"), (-64, "-64")],
                 16: [(63, "3f"), (-64, "-40")],
                 20: [(63, "33"), (-64, "-34")]],
            8:  [2: [(127, "0111_1111"), (-128, "-1000_0000")],
                 8: [(127, "177"), (-128, "-200")],
                 10: [(127, "127"), (-128, "-128")],
                 16: [(127, "7f"), (-128, "-80")],
                 20: [(127, "67"), (-128, "-68")]],
            9:  [2: [(255, "0_1111_1111"), (-256, "-1_0000_0000")],
                 8: [(255, "377"), (-256, "-400")],
                 10: [(255, "255"), (-256, "-256")],
                 16: [(255, "0ff"), (-256, "-100")],
                 20: [(255, "cf"), (-256, "-cg")]],
            10: [2: [(511, "01_1111_1111"), (-512, "-10_0000_0000")],
                 8: [(511, "777"), (-512, "-1_000")],
                 10: [(511, "511"), (-512, "-512")],
                 16: [(511, "1ff"), (-512, "-200")],
                 20: [(511, "15b"), (-512, "-15c")]],
            11: [2: [(1023, "011_1111_1111"), (-1024, "-100_0000_0000")],
                 8: [(1023, "1_777"), (-1024, "-2_000")],
                 10: [(1023, "1_023"), (-1024, "-1_024")],
                 16: [(1023, "3ff"), (-1024, "-400")],
                 20: [(1023, "2b3"), (-1024, "-2b4")]],
            12: [2: [(2047, "0111_1111_1111"), (-2048, "-1000_0000_0000")],
                 8: [(2047, "3_777"), (-2048, "-4_000")],
                 10: [(2047, "2_047"), (-2048, "-2_048")],
                 16: [(2047, "7ff"), (-2048, "-800")],
                 20: [(2047, "527"), (-2048, "-528")]],
            13: [2: [(4095, "0_1111_1111_1111"), (-4096, "-1_0000_0000_0000")],
                 8: [(4095, "7_777"), (-4096, "-10_000")],
                 10: [(4095, "4_095"), (-4096, "-4_096")],
                 16: [(4095, "0fff"), (-4096, "-1000")],
                 20: [(4095, "a4f"), (-4096, "-a4g")]],
            14: [2: [(8191, "01_1111_1111_1111"), (-8192, "-10_0000_0000_0000")],
                 8: [(8191, "17_777"), (-8192, "-20_000")],
                 10: [(8191, "8_191"), (-8192, "-8_192")],
                 16: [(8191, "1fff"), (-8192, "-2000")],
                 20: [(8191, "1_09b"), (-8192, "-1_09c")]],
            15: [2: [(16383, "011_1111_1111_1111"), (-16384, "-100_0000_0000_0000")],
                 8: [(16383, "37_777"), (-16384, "-40_000")],
                 10: [(16383, "16_383"), (-16384, "-16_384")],
                 16: [(16383, "3fff"), (-16384, "-4000")],
                 20: [(16383, "2_0j3"), (-16384, "-2_0j4")]],
            16: [2: [(32767, "0111_1111_1111_1111"), (-32768, "-1000_0000_0000_0000")],
                 8: [(32767, "77_777"), (-32768, "-100_000")],
                 10: [(32767, "32_767"), (-32768, "-32_768")],
                 16: [(32767, "7fff"), (-32768, "-8000")],
                 20: [(32767, "4_1i7"), (-32768, "-4_1i8")]],
            17: [2: [(65535, "0_1111_1111_1111_1111"), (-65536, "-1_0000_0000_0000_0000")],
                 8: [(65535, "177_777"), (-65536, "-200_000")],
                 10: [(65535, "65_535"), (-65536, "-65_536")],
                 16: [(65535, "0_ffff"), (-65536, "-1_0000")],
                 20: [(65535, "8_3gf"), (-65536, "-8_3gg")]],
            18: [2: [(131071, "01_1111_1111_1111_1111"), (-131072, "-10_0000_0000_0000_0000")],
                 8: [(131071, "377_777"), (-131072, "-400_000")],
                 10: [(131071, "131_071"), (-131072, "-131_072")],
                 16: [(131071, "1_ffff"), (-131072, "-2_0000")],
                 20: [(131071, "g_7db"), (-131072, "-g_7dc")]],
            19: [2: [(262143, "011_1111_1111_1111_1111"), (-262144, "-100_0000_0000_0000_0000")],
                 8: [(262143, "777_777"), (-262144, "-1_000_000")],
                 10: [(262143, "262_143"), (-262144, "-262_144")],
                 16: [(262143, "3_ffff"), (-262144, "-4_0000")],
                 20: [(262143, "1c_f73"), (-262144, "-1c_f74")]],
            20: [2: [(524287, "0111_1111_1111_1111_1111"), (-524288, "-1000_0000_0000_0000_0000")],
                 8: [(524287, "1_777_777"), (-524288, "-2_000_000")],
                 10: [(524287, "524_287"), (-524288, "-524_288")],
                 16: [(524287, "7_ffff"), (-524288, "-8_0000")],
                 20: [(524287, "35_ae7"), (-524288, "-35_ae8")]],
            21: [2: [(1048575, "0_1111_1111_1111_1111_1111"), (-1048576, "-1_0000_0000_0000_0000_0000")],
                 8: [(1048575, "3_777_777"), (-1048576, "-4_000_000")],
                 10: [(1048575, "1_048_575"), (-1048576, "-1_048_576")],
                 16: [(1048575, "0f_ffff"), (-1048576, "-10_0000")],
                 20: [(1048575, "6b_18f"), (-1048576, "-6b_18g")]],
            22: [2: [(2097151, "01_1111_1111_1111_1111_1111"), (-2097152, "-10_0000_0000_0000_0000_0000")],
                 8: [(2097151, "7_777_777"), (-2097152, "-10_000_000")],
                 10: [(2097151, "2_097_151"), (-2097152, "-2_097_152")],
                 16: [(2097151, "1f_ffff"), (-2097152, "-20_0000")],
                 20: [(2097151, "d2_2hb"), (-2097152, "-d2_2hc")]],
            23: [2: [(4194303, "011_1111_1111_1111_1111_1111"), (-4194304, "-100_0000_0000_0000_0000_0000")],
                 8: [(4194303, "17_777_777"), (-4194304, "-20_000_000")],
                 10: [(4194303, "4_194_303"), (-4194304, "-4_194_304")],
                 16: [(4194303, "3f_ffff"), (-4194304, "-40_0000")],
                 20: [(4194303, "164_5f3"), (-4194304, "-164_5f4")]],
            24: [2: [(8388607, "0111_1111_1111_1111_1111_1111"), (-8388608, "-1000_0000_0000_0000_0000_0000")],
                 8: [(8388607, "37_777_777"), (-8388608, "-40_000_000")],
                 10: [(8388607, "8_388_607"), (-8388608, "-8_388_608")],
                 16: [(8388607, "7f_ffff"), (-8388608, "-80_0000")],
                 20: [(8388607, "2c8_ba7"), (-8388608, "-2c8_ba8")]],
            25: [2: [(16777215, "0_1111_1111_1111_1111_1111_1111"), (-16777216, "-1_0000_0000_0000_0000_0000_0000")],
                 8: [(16777215, "77_777_777"), (-16777216, "-100_000_000")],
                 10: [(16777215, "16_777_215"), (-16777216, "-16_777_216")],
                 16: [(16777215, "0ff_ffff"), (-16777216, "-100_0000")],
                 20: [(16777215, "54h_30f"), (-16777216, "-54h_30g")]],
            26: [2: [(33554431, "01_1111_1111_1111_1111_1111_1111"), (-33554432, "-10_0000_0000_0000_0000_0000_0000")],
                 8: [(33554431, "177_777_777"), (-33554432, "-200_000_000")],
                 10: [(33554431, "33_554_431"), (-33554432, "-33_554_432")],
                 16: [(33554431, "1ff_ffff"), (-33554432, "-200_0000")],
                 20: [(33554431, "a9e_61b"), (-33554432, "-a9e_61c")]],
            27: [2: [(67108863, "011_1111_1111_1111_1111_1111_1111"), (-67108864, "-100_0000_0000_0000_0000_0000_0000")],
                 8: [(67108863, "377_777_777"), (-67108864, "-400_000_000")],
                 10: [(67108863, "67_108_863"), (-67108864, "-67_108_864")],
                 16: [(67108863, "3ff_ffff"), (-67108864, "-400_0000")],
                 20: [(67108863, "1_0j8_c33"), (-67108864, "-1_0j8_c34")]],
            28: [2: [(134217727, "0111_1111_1111_1111_1111_1111_1111"), (-134217728, "-1000_0000_0000_0000_0000_0000_0000")],
                 8: [(134217727, "777_777_777"), (-134217728, "-1_000_000_000")],
                 10: [(134217727, "134_217_727"), (-134217728, "-134_217_728")],
                 16: [(134217727, "7ff_ffff"), (-134217728, "-800_0000")],
                 20: [(134217727, "2_1ih_467"), (-134217728, "-2_1ih_468")]],
            29: [2: [(268435455, "0_1111_1111_1111_1111_1111_1111_1111"), (-268435456, "-1_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(268435455, "1_777_777_777"), (-268435456, "-2_000_000_000")],
                 10: [(268435455, "268_435_455"), (-268435456, "-268_435_456")],
                 16: [(268435455, "0fff_ffff"), (-268435456, "-1000_0000")],
                 20: [(268435455, "4_3he_8cf"), (-268435456, "-4_3he_8cg")]],
            30: [2: [(536870911, "01_1111_1111_1111_1111_1111_1111_1111"), (-536870912, "-10_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(536870911, "3_777_777_777"), (-536870912, "-4_000_000_000")],
                 10: [(536870911, "536_870_911"), (-536870912, "-536_870_912")],
                 16: [(536870911, "1fff_ffff"), (-536870912, "-2000_0000")],
                 20: [(536870911, "8_7f8_h5b"), (-536870912, "-8_7f8_h5c")]],
            31: [2: [(1073741823, "011_1111_1111_1111_1111_1111_1111_1111"), (-1073741824, "-100_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(1073741823, "7_777_777_777"), (-1073741824, "-10_000_000_000")],
                 10: [(1073741823, "1_073_741_823"), (-1073741824, "-1_073_741_824")],
                 16: [(1073741823, "3fff_ffff"), (-1073741824, "-4000_0000")],
                 20: [(1073741823, "g_fah_eb3"), (-1073741824, "-g_fah_eb4")]],
            32: [2: [(2147483647, "0111_1111_1111_1111_1111_1111_1111_1111"), (-2147483648, "-1000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(2147483647, "17_777_777_777"), (-2147483648, "-20_000_000_000")],
                 10: [(2147483647, "2_147_483_647"), (-2147483648, "-2_147_483_648")],
                 16: [(2147483647, "7fff_ffff"), (-2147483648, "-8000_0000")],
                 20: [(2147483647, "1d_b1f_927"), (-2147483648, "-1d_b1f_928")]],
            33: [2: [(4294967295, "0_1111_1111_1111_1111_1111_1111_1111_1111"), (-4294967296, "-1_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(4294967295, "37_777_777_777"), (-4294967296, "-40_000_000_000")],
                 10: [(4294967295, "4_294_967_295"), (-4294967296, "-4_294_967_296")],
                 16: [(4294967295, "0_ffff_ffff"), (-4294967296, "-1_0000_0000")],
                 20: [(4294967295, "37_23a_i4f"), (-4294967296, "-37_23a_i4g")]],
            34: [2: [(8589934591, "01_1111_1111_1111_1111_1111_1111_1111_1111"), (-8589934592, "-10_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(8589934591, "77_777_777_777"), (-8589934592, "-100_000_000_000")],
                 10: [(8589934591, "8_589_934_591"), (-8589934592, "-8_589_934_592")],
                 16: [(8589934591, "1_ffff_ffff"), (-8589934592, "-2_0000_0000")],
                 20: [(8589934591, "6e_471_g9b"), (-8589934592, "-6e_471_g9c")]],
            35: [2: [(17179869183, "011_1111_1111_1111_1111_1111_1111_1111_1111"), (-17179869184, "-100_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(17179869183, "177_777_777_777"), (-17179869184, "-200_000_000_000")],
                 10: [(17179869183, "17_179_869_183"), (-17179869184, "-17_179_869_184")],
                 16: [(17179869183, "3_ffff_ffff"), (-17179869184, "-4_0000_0000")],
                 20: [(17179869183, "d8_8e3_cj3"), (-17179869184, "-d8_8e3_cj4")]],
            36: [2: [(34359738367, "0111_1111_1111_1111_1111_1111_1111_1111_1111"), (-34359738368, "-1000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(34359738367, "377_777_777_777"), (-34359738368, "-400_000_000_000")],
                 10: [(34359738367, "34_359_738_367"), (-34359738368, "-34_359_738_368")],
                 16: [(34359738367, "7_ffff_ffff"), (-34359738368, "-8_0000_0000")],
                 20: [(34359738367, "16g_h87_5i7"), (-34359738368, "-16g_h87_5i8")]],
            37: [2: [(68719476735, "0_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-68719476736, "-1_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(68719476735, "777_777_777_777"), (-68719476736, "-1_000_000_000_000")],
                 10: [(68719476735, "68_719_476_735"), (-68719476736, "-68_719_476_736")],
                 16: [(68719476735, "0f_ffff_ffff"), (-68719476736, "-10_0000_0000")],
                 20: [(68719476735, "2dd_ege_bgf"), (-68719476736, "-2dd_ege_bgg")]],
            38: [2: [(137438953471, "01_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-137438953472, "-10_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(137438953471, "1_777_777_777_777"), (-137438953472, "-2_000_000_000_000")],
                 10: [(137438953471, "137_438_953_471"), (-137438953472, "-137_438_953_472")],
                 16: [(137438953471, "1f_ffff_ffff"), (-137438953472, "-20_0000_0000")],
                 20: [(137438953471, "577_9d9_3db"), (-137438953472, "-577_9d9_3dc")]],
            39: [2: [(274877906943, "011_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-274877906944, "-100_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(274877906943, "3_777_777_777_777"), (-274877906944, "-4_000_000_000_000")],
                 10: [(274877906943, "274_877_906_943"), (-274877906944, "-274_877_906_944")],
                 16: [(274877906943, "3f_ffff_ffff"), (-274877906944, "-40_0000_0000")],
                 20: [(274877906943, "aee_j6i_773"), (-274877906944, "-aee_j6i_774")]],
            40: [2: [(549755813887, "0111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-549755813888, "-1000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(549755813887, "7_777_777_777_777"), (-549755813888, "-10_000_000_000_000")],
                 10: [(549755813887, "549_755_813_887"), (-549755813888, "-549_755_813_888")],
                 16: [(549755813887, "7f_ffff_ffff"), (-549755813888, "-80_0000_0000")],
                 20: [(549755813887, "1_199_idg_ee7"), (-549755813888, "-1_199_idg_ee8")]],
            41: [2: [(1099511627775, "0_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-1099511627776, "-1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(1099511627775, "17_777_777_777_777"), (-1099511627776, "-20_000_000_000_000")],
                 10: [(1099511627775, "1_099_511_627_775"), (-1099511627776, "-1_099_511_627_776")],
                 16: [(1099511627775, "0ff_ffff_ffff"), (-1099511627776, "-100_0000_0000")],
                 20: [(1099511627775, "2_2ij_h7d_98f"), (-1099511627776, "-2_2ij_h7d_98g")]],
            42: [2: [(2199023255551, "01_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-2199023255552, "-10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(2199023255551, "37_777_777_777_777"), (-2199023255552, "-40_000_000_000_000")],
                 10: [(2199023255551, "2_199_023_255_551"), (-2199023255552, "-2_199_023_255_552")],
                 16: [(2199023255551, "1ff_ffff_ffff"), (-2199023255552, "-200_0000_0000")],
                 20: [(2199023255551, "4_5hj_ef6_ihb"), (-2199023255552, "-4_5hj_ef6_ihc")]],
            43: [2: [(4398046511103, "011_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-4398046511104, "-100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(4398046511103, "77_777_777_777_777"), (-4398046511104, "-100_000_000_000_000")],
                 10: [(4398046511103, "4_398_046_511_103"), (-4398046511104, "-4_398_046_511_104")],
                 16: [(4398046511103, "3ff_ffff_ffff"), (-4398046511104, "-400_0000_0000")],
                 20: [(4398046511103, "8_bfj_9ad_hf3"), (-4398046511104, "-8_bfj_9ad_hf4")]],
            44: [2: [(8796093022207, "0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-8796093022208, "-1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(8796093022207, "177_777_777_777_777"), (-8796093022208, "-200_000_000_000_000")],
                 10: [(8796093022207, "8_796_093_022_207"), (-8796093022208, "-8_796_093_022_208")],
                 16: [(8796093022207, "7ff_ffff_ffff"), (-8796093022208, "-800_0000_0000")],
                 20: [(8796093022207, "h_3bi_j17_fa7"), (-8796093022208, "-h_3bi_j17_fa8")]],
            45: [2: [(17592186044415, "0_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-17592186044416, "-1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(17592186044415, "377_777_777_777_777"), (-17592186044416, "-400_000_000_000_000")],
                 10: [(17592186044415, "17_592_186_044_415"), (-17592186044416, "-17_592_186_044_416")],
                 16: [(17592186044415, "0fff_ffff_ffff"), (-17592186044416, "-1000_0000_0000")],
                 20: [(17592186044415, "1e_73h_i2f_b0f"), (-17592186044416, "-1e_73h_i2f_b0g")]],
            46: [2: [(35184372088831, "01_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-35184372088832, "-10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(35184372088831, "777_777_777_777_777"), (-35184372088832, "-1_000_000_000_000_000")],
                 10: [(35184372088831, "35_184_372_088_831"), (-35184372088832, "-35_184_372_088_832")],
                 16: [(35184372088831, "1fff_ffff_ffff"), (-35184372088832, "-2000_0000_0000")],
                 20: [(35184372088831, "38_e7f_g5b_21b"), (-35184372088832, "-38_e7f_g5b_21c")]],
            47: [2: [(70368744177663, "011_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-70368744177664, "-100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(70368744177663, "1_777_777_777_777_777"), (-70368744177664, "-2_000_000_000_000_000")],
                 10: [(70368744177663, "70_368_744_177_663"), (-70368744177664, "-70_368_744_177_664")],
                 16: [(70368744177663, "3fff_ffff_ffff"), (-70368744177664, "-4000_0000_0000")],
                 20: [(70368744177663, "6h_8fb_cb2_433"), (-70368744177664, "-6h_8fb_cb2_434")]],
            48: [2: [(140737488355327, "0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-140737488355328, "-1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(140737488355327, "3_777_777_777_777_777"), (-140737488355328, "-4_000_000_000_000_000")],
                 10: [(140737488355327, "140_737_488_355_327"), (-140737488355328, "-140_737_488_355_328")],
                 16: [(140737488355327, "7fff_ffff_ffff"), (-140737488355328, "-8000_0000_0000")],
                 20: [(140737488355327, "de_hb3_524_867"), (-140737488355328, "-de_hb3_524_868")]],
            49: [2: [(281474976710655, "0_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-281474976710656, "-1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(281474976710655, "7_777_777_777_777_777"), (-281474976710656, "-10_000_000_000_000_000")],
                 10: [(281474976710655, "281_474_976_710_655"), (-281474976710656, "-281_474_976_710_656")],
                 16: [(281474976710655, "0_ffff_ffff_ffff"), (-281474976710656, "-1_0000_0000_0000")],
                 20: [(281474976710655, "179_f26_a48_gcf"), (-281474976710656, "-179_f26_a48_gcg")]],
            50: [2: [(562949953421311, "01_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-562949953421312, "-10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(562949953421311, "17_777_777_777_777_777"), (-562949953421312, "-20_000_000_000_000_000")],
                 10: [(562949953421311, "562_949_953_421_311"), (-562949953421312, "-562_949_953_421_312")],
                 16: [(562949953421311, "1_ffff_ffff_ffff"), (-562949953421312, "-2_0000_0000_0000")],
                 20: [(562949953421311, "2ej_a4d_08h_d5b"), (-562949953421312, "-2ej_a4d_08h_d5c")]],
            51: [2: [(1125899906842623, "011_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-1125899906842624, "-100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(1125899906842623, "37_777_777_777_777_777"), (-1125899906842624, "-40_000_000_000_000_000")],
                 10: [(1125899906842623, "1_125_899_906_842_623"), (-1125899906842624, "-1_125_899_906_842_624")],
                 16: [(1125899906842623, "3_ffff_ffff_ffff"), (-1125899906842624, "-4_0000_0000_0000")],
                 20: [(1125899906842623, "59j_096_0hf_6b3"), (-1125899906842624, "-59j_096_0hf_6b4")]],
            52: [2: [(2251799813685247, "0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-2251799813685248, "-1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(2251799813685247, "77_777_777_777_777_777"), (-2251799813685248, "-100_000_000_000_000_000")],
                 10: [(2251799813685247, "2_251_799_813_685_247"), (-2251799813685248, "-2_251_799_813_685_248")],
                 16: [(2251799813685247, "7_ffff_ffff_ffff"), (-2251799813685248, "-8_0000_0000_0000")],
                 20: [(2251799813685247, "aji_0ic_1fa_d27"), (-2251799813685248, "-aji_0ic_1fa_d28")]],
            53: [2: [(4503599627370495, "0_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-4503599627370496, "-1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(4503599627370495, "177_777_777_777_777_777"), (-4503599627370496, "-200_000_000_000_000_000")],
                 10: [(4503599627370495, "4_503_599_627_370_495"), (-4503599627370496, "-4_503_599_627_370_496")],
                 16: [(4503599627370495, "0f_ffff_ffff_ffff"), (-4503599627370496, "-10_0000_0000_0000")],
                 20: [(4503599627370495, "1_1jg_1h4_3b1_64f"), (-4503599627370496, "-1_1jg_1h4_3b1_64g")]],
            54: [2: [(9007199254740991, "01_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-9007199254740992, "-10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(9007199254740991, "377_777_777_777_777_777"), (-9007199254740992, "-400_000_000_000_000_000")],
                 10: [(9007199254740991, "9_007_199_254_740_991"), (-9007199254740992, "-9_007_199_254_740_992")],
                 16: [(9007199254740991, "1f_ffff_ffff_ffff"), (-9007199254740992, "-20_0000_0000_0000")],
                 20: [(9007199254740991, "2_3jc_3e8_722_c9b"), (-9007199254740992, "-2_3jc_3e8_722_c9c")]],
            55: [2: [(18014398509481983, "011_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-18014398509481984, "-100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(18014398509481983, "777_777_777_777_777_777"), (-18014398509481984, "-1_000_000_000_000_000_000")],
                 10: [(18014398509481983, "18_014_398_509_481_983"), (-18014398509481984, "-18_014_398_509_481_984")],
                 16: [(18014398509481983, "3f_ffff_ffff_ffff"), (-18014398509481984, "-40_0000_0000_0000")],
                 20: [(18014398509481983, "4_7j4_78g_e45_4j3"), (-18014398509481984, "-4_7j4_78g_e45_4j4")]],
            56: [2: [(36028797018963967, "0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-36028797018963968, "-1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(36028797018963967, "1_777_777_777_777_777_777"), (-36028797018963968, "-2_000_000_000_000_000_000")],
                 10: [(36028797018963967, "36_028_797_018_963_967"), (-36028797018963968, "-36_028_797_018_963_968")],
                 16: [(36028797018963967, "7f_ffff_ffff_ffff"), (-36028797018963968, "-80_0000_0000_0000")],
                 20: [(36028797018963967, "8_fi8_ehd_88a_9i7"), (-36028797018963968, "-8_fi8_ehd_88a_9i8")]],
            57: [2: [(72057594037927935, "0_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-72057594037927936, "-1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(72057594037927935, "3_777_777_777_777_777_777"), (-72057594037927936, "-4_000_000_000_000_000_000")],
                 10: [(72057594037927935, "72_057_594_037_927_935"), (-72057594037927936, "-72_057_594_037_927_936")],
                 16: [(72057594037927935, "0ff_ffff_ffff_ffff"), (-72057594037927936, "-100_0000_0000_0000")],
                 20: [(72057594037927935, "h_bgh_9f6_gh0_jgf"), (-72057594037927936, "-h_bgh_9f6_gh0_jgg")]],
            58: [2: [(144115188075855871, "01_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-144115188075855872, "-10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(144115188075855871, "7_777_777_777_777_777_777"), (-144115188075855872, "-10_000_000_000_000_000_000")],
                 10: [(144115188075855871, "144_115_188_075_855_871"), (-144115188075855872, "-144_115_188_075_855_872")],
                 16: [(144115188075855871, "1ff_ffff_ffff_ffff"), (-144115188075855872, "-200_0000_0000_0000")],
                 20: [(144115188075855871, "1f_3de_jad_de1_jdb"), (-144115188075855872, "-1f_3de_jad_de1_jdc")]],
            59: [2: [(288230376151711743, "011_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-288230376151711744, "-100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(288230376151711743, "17_777_777_777_777_777_777"), (-288230376151711744, "-20_000_000_000_000_000_000")],
                 10: [(288230376151711743, "288_230_376_151_711_743"), (-288230376151711744, "-288_230_376_151_711_744")],
                 16: [(288230376151711743, "3ff_ffff_ffff_ffff"), (-288230376151711744, "-400_0000_0000_0000")],
                 20: [(288230376151711743, "3a_779_j17_783_j73"), (-288230376151711744, "-3a_779_j17_783_j74")]],
            60: [2: [(576460752303423487, "0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-576460752303423488, "-1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(576460752303423487, "37_777_777_777_777_777_777"), (-576460752303423488, "-40_000_000_000_000_000_000")],
                 10: [(576460752303423487, "576_460_752_303_423_487"), (-576460752303423488, "-576_460_752_303_423_488")],
                 16: [(576460752303423487, "7ff_ffff_ffff_ffff"), (-576460752303423488, "-800_0000_0000_0000")],
                 20: [(576460752303423487, "70_eej_i2e_eg7_ie7"), (-576460752303423488, "-70_eej_i2e_eg7_ie8")]],
            61: [2: [(1152921504606846975, "0_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-1152921504606846976, "-1_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(1152921504606846975, "77_777_777_777_777_777_777"), (-1152921504606846976, "-100_000_000_000_000_000_000")],
                 10: [(1152921504606846975, "1_152_921_504_606_846_975"), (-1152921504606846976, "-1_152_921_504_606_846_976")],
                 16: [(1152921504606846975, "0fff_ffff_ffff_ffff"), (-1152921504606846976, "-1000_0000_0000_0000")],
                 20: [(1152921504606846975, "e1_99j_g59_9cf_h8f"), (-1152921504606846976, "-e1_99j_g59_9cf_h8g")]],
            62: [2: [(2305843009213693951, "01_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-2305843009213693952, "-10_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(2305843009213693951, "177_777_777_777_777_777_777"), (-2305843009213693952, "-200_000_000_000_000_000_000")],
                 10: [(2305843009213693951, "2_305_843_009_213_693_951"), (-2305843009213693952, "-2_305_843_009_213_693_952")],
                 16: [(2305843009213693951, "1fff_ffff_ffff_ffff"), (-2305843009213693952, "-2000_0000_0000_0000")],
                 20: [(2305843009213693951, "182_ijj_cai_j5b_ehb"), (-2305843009213693952, "-182_ijj_cai_j5b_ehc")]],
            63: [2: [(4611686018427387903, "011_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-4611686018427387904, "-100_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(4611686018427387903, "377_777_777_777_777_777_777"), (-4611686018427387904, "-400_000_000_000_000_000_000")],
                 10: [(4611686018427387903, "4_611_686_018_427_387_903"), (-4611686018427387904, "-4_611_686_018_427_387_904")],
                 16: [(4611686018427387903, "3fff_ffff_ffff_ffff"), (-4611686018427387904, "-4000_0000_0000_0000")],
                 20: [(4611686018427387903, "2g5_hjj_51h_ib3_9f3"), (-4611686018427387904, "-2g5_hjj_51h_ib3_9f4")]],
            64: [2: [(9223372036854775807, "0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111"), (-9223372036854775808, "-1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000")],
                 8: [(9223372036854775807, "777_777_777_777_777_777_777"), (-9223372036854775808, "-1_000_000_000_000_000_000_000")],
                 10: [(9223372036854775807, "9_223_372_036_854_775_807"), (-9223372036854775808, "-9_223_372_036_854_775_808")],
                 16: [(9223372036854775807, "7fff_ffff_ffff_ffff"), (-9223372036854775808, "-8000_0000_0000_0000")],
                 20: [(9223372036854775807, "5cb_fji_a3f_h26_ja7"), (-9223372036854775808, "-5cb_fji_a3f_h26_ja8")]]
        ]
        
        for bit in 1...64 {
            if let customInt = try? CustomInteger(for: bit) {
                for radix in radices {
                    if let testCases = expectedResults[bit]?[radix] {
                        for (value, expectedValue) in testCases {
                            let result = try? customInt.radix(value: value, radix: radix)
                            #expect(result == expectedValue, "Value \(value) Failed for bit width \(bit) and radix \(radix). Expected \(expectedValue) but got \(result).")
                        }
                    }
                }
            }
        }
    }
    
    @Test("Radix Non-Max or Min Tests") func testRadixNonMinMax() {
        #expect(try! CustomInteger(for: 5).radix(value: -2, radix: 8) == "-2", "Failed for bit width 5 and radix 8")
        #expect(try! CustomInteger(for: 12).radix(value: -1, radix: 8) == "-1", "Failed for bit width 12 and radix 8")
        #expect(try! CustomInteger(for: 5).radix(value: -2, radix: 10) == "-2", "Failed for bit width 5 and radix 10")
        #expect(try! CustomInteger(for: 12).radix(value: -1, radix: 10) == "-1", "Failed for bit width 12 and radix 10")
    }
    
    // MARK: - Benchmark Tests
    @Test("Benchmark Tests") func BenchMark_Tests() {
        
        guard onBenchmarkTests else { return }
        
        //            @Test("Benchmark Tight Memory Preallocation")
        func BenchmarkTightMemoryPreallocation_Tests(_ label: String = "") {
            
            print(label)
            
            func benchmarkPreallocation(bitWidth: Int, radix: Int, iterations: Int = 1_000_000) {
                var totalTime: UInt64 = 0
                let clock = ContinuousClock()  // ✅ Create an instance of ContinuousClock
                
                for _ in 0..<iterations {
                    let start = clock.now  // ✅ Correct usage of ContinuousClock.now
                    
                    let log2Radix = log2(Double(radix))
                    let minCharacters = Int(ceil(Double(bitWidth) / log2Radix))
                    let separatorGroup = (radix == 2 || radix == 16) ? 4 : 3
                    let separatorCount = (minCharacters - 1) / separatorGroup
                    let preallocSize = minCharacters + separatorCount
                    
                    var result = [Character]()
                    result.reserveCapacity(preallocSize)
                    
                    let end = clock.now  // ✅ Correct usage
                    let duration = start.duration(to: end)  // ✅ Get Duration instance
                    totalTime += UInt64(duration.components.attoseconds / 1_000_000_000)  // ✅ Convert attoseconds to nanoseconds
                }
                
                let avgTime = Double(totalTime) / Double(iterations)
                print("BitWidth: \(bitWidth), Radix: \(radix), Avg Time: \(avgTime) ns")
            }
            
            // Run benchmarks for different cases
            let bitWidths = [8, 16, 32, 64]   // Adjust as needed
            let radices = [2, 8, 10, 16]      // Common radices
            
            for bitWidth in bitWidths {
                for radix in radices {
                    benchmarkPreallocation(bitWidth: bitWidth, radix: radix)
                }
            }
        }
        
        //        @Test("Benchmark Tight vs Naive Memory Preallocation")
        func BenchmarkMemoryPreallocation_Tests(_ label: String = "") {
            
            print(label)
            
            func benchmarkPreallocation(bitWidth: Int, radix: Int, iterations: Int = 1_000_000) {
                var totalTimeTight: UInt64 = 0
                var totalTimeNaive: UInt64 = 0
                let clock = ContinuousClock()
                
                for _ in 0..<iterations {
                    // **Tight Memory Preallocation**
                    let startTight = clock.now
                    
                    let log2Radix = log2(Double(radix))
                    let minCharacters = Int(ceil(Double(bitWidth) / log2Radix))
                    let separatorGroup = (radix == 2 || radix == 16) ? 4 : 3
                    let separatorCount = (minCharacters - 1) / separatorGroup
                    let preallocSizeTight = minCharacters + separatorCount
                    
                    var resultTight = [Character]()
                    resultTight.reserveCapacity(preallocSizeTight)
                    
                    let endTight = clock.now
                    let durationTight = startTight.duration(to: endTight)
                    totalTimeTight += UInt64(durationTight.components.attoseconds / 1_000_000_000)
                    
                    // **Naive Memory Preallocation**
                    let startNaive = clock.now
                    
                    let groupingSize = (radix == 2 || radix == 16) ? 4 : 3
                    let preallocSizeNaive = bitWidth + (bitWidth - 1) / groupingSize
                    
                    var resultNaive = [Character]()
                    resultNaive.reserveCapacity(preallocSizeNaive)
                    
                    let endNaive = clock.now
                    let durationNaive = startNaive.duration(to: endNaive)
                    totalTimeNaive += UInt64(durationNaive.components.attoseconds / 1_000_000_000)
                }
                
                let avgTimeTight = Double(totalTimeTight) / Double(iterations)
                let avgTimeNaive = Double(totalTimeNaive) / Double(iterations)
                print("BitWidth: \(bitWidth), Radix: \(radix) | Tight: \(avgTimeTight) ns | Naive: \(avgTimeNaive) ns | Diff: \(avgTimeNaive - avgTimeTight) ns")
            }
            
            // Run benchmarks for different cases
            let bitWidths = [8, 16, 32, 64]   // Adjust as needed
            let radices = [2, 8, 10, 16]      // Common radices
            
            for bitWidth in bitWidths {
                for radix in radices {
                    benchmarkPreallocation(bitWidth: bitWidth, radix: radix)
                }
            }
        }
        
        //        @Test("Benchmark Floating-Point vs Integer Log2 Preallocation")
        func BenchmarkLog2Preallocation_Tests(_ label: String = "") {
            
            print(label)
            
            let log2Table: [Int: Int] = [
                2: 1_000_000,
                8: 3_000_000,
                10: 3_321_929,
                16: 4_000_000
            ]
            
            func floatingPointPrealloc(bitWidth: Int, radix: Int) -> Int {
                let log2Radix = log2(Double(radix))
                let minCharacters = Int(ceil(Double(bitWidth) / log2Radix))
                let separatorGroup = (radix == 2 || radix == 16) ? 4 : 3
                let separatorCount = (minCharacters - 1) / separatorGroup
                return minCharacters + separatorCount
            }
            
            func integerPrealloc(bitWidth: Int, radix: Int) -> Int {
                let scaledLog2 = log2Table[radix]!
                let minCharacters = (bitWidth * 1_000_000 + scaledLog2 - 1) / scaledLog2
                let separatorGroup = (radix == 2 || radix == 16) ? 4 : 3
                let separatorCount = (minCharacters - 1) / separatorGroup
                return minCharacters + separatorCount
            }
            
            func benchmark(_ function: (Int, Int) -> Int, bitWidth: Int, radix: Int, iterations: Int = 1_000_000) -> Double {
                var totalTime: UInt64 = 0
                for _ in 0..<iterations {
                    let start = ContinuousClock.now
                    _ = function(bitWidth, radix)
                    let end = ContinuousClock.now
                    let duration = end - start
                    totalTime += UInt64(duration.components.attoseconds / 1_000_000_000) // Convert to nanoseconds
                }
                return Double(totalTime) / Double(iterations)
            }
            
            let bitWidths = [16, 24, 56, 64]
            let radices = [2, 8, 10, 16]
            
            for bitWidth in bitWidths {
                for radix in radices {
                    let fpTime = benchmark(floatingPointPrealloc, bitWidth: bitWidth, radix: radix)
                    let intTime = benchmark(integerPrealloc, bitWidth: bitWidth, radix: radix)
                    let diff = fpTime - intTime
                    print("BitWidth: \(bitWidth), Radix: \(radix) | FP: \(fpTime) ns | INT: \(intTime) ns | Diff: \(diff) ns")
                }
            }
        }
        
        BenchmarkTightMemoryPreallocation_Tests("Benchmark Tight Memory Preallocation")
        BenchmarkMemoryPreallocation_Tests("Benchmark Tight vs Naive Memory Preallocation")
        BenchmarkLog2Preallocation_Tests("Benchmark Floating-Point vs Integer Log2 Preallocation")
        
    }
    
}
